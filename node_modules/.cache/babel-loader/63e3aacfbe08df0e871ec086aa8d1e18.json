{"ast":null,"code":"import _toConsumableArray from \"/Users/dkalu/Desktop/Projects/Tests/Inspired Mobile/Code/name-generator \\u263A\\uFE0F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/dkalu/Desktop/Projects/Tests/Inspired Mobile/Code/name-generator \\u263A\\uFE0F/src/containers/AppContainer.tsx\";\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { actionConstants } from \"../actions\"; // Import Interfaces\n\n// Import components\nimport Form from \"../components/Form\";\nimport List from \"../components/List\";\nimport RandomSelectButton from \"../components/RandomSelectButton\";\n\nvar AppContainer = function AppContainer(props) {\n  // Creating new item\n  var handleNameCreate = function handleNameCreate(name) {\n    var names = props.names,\n        addName = props.addName; // Prepare new state\n\n    var newListState = _toConsumableArray(names); // Update new state\n\n\n    newListState.push(name); // Update state\n\n    addName(newListState);\n  };\n\n  var handleNameRemove = function handleNameRemove(id) {\n    var deleteName = props.deleteName;\n    deleteName(id);\n  };\n\n  var checkElementIdEqual = function checkElementIdEqual(randomlyPicked) {\n    var lastRandomlyPickedId = props.lastRandomlyPickedId;\n    return randomlyPicked.id !== lastRandomlyPickedId;\n  }; // Generate random name\n\n\n  var getRandomName = function getRandomName() {\n    var names = props.names,\n        setLastRandomlyPickedId = props.setLastRandomlyPickedId,\n        setSelectedName = props.setSelectedName,\n        selected = props.selected;\n    var listClone = Array.from(names).map(function (o) {\n      return Object.assign({}, o);\n    });\n\n    if (listClone.length > 0) {\n      var randomlyPicked;\n      randomlyPicked = listClone[Math.floor(Math.random() * listClone.length)];\n\n      if (checkElementIdEqual(randomlyPicked)) {\n        setLastRandomlyPickedId(randomlyPicked.id);\n        setSelectedName([randomlyPicked]);\n      } else {\n        setLastRandomlyPickedId(randomlyPicked.id);\n        var randomlyPickedElementIndex = listClone.findIndex(function (todo) {\n          return todo.id === randomlyPicked.id;\n        });\n\n        if (listClone.length === 1) {\n          setSelectedName([randomlyPicked]);\n        } else {\n          if (randomlyPickedElementIndex !== 0) {\n            setSelectedName([listClone[randomlyPickedElementIndex - 1]]);\n\n            if (listClone[randomlyPickedElementIndex - 1] && selected[0]) {\n              if (listClone[randomlyPickedElementIndex - 1].id === selected[0].id) {\n                setSelectedName([listClone[randomlyPickedElementIndex + 1]]);\n              }\n            }\n          }\n\n          setSelectedName([listClone[randomlyPickedElementIndex + 1]]);\n        }\n      }\n    }\n  };\n\n  var names = props.names,\n      selected = props.selected;\n  var randomName;\n\n  if (selected[0]) {\n    randomName = selected[0].text;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"app-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, randomName ? React.createElement(\"div\", {\n    className: \"random-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, randomName) : '', React.createElement(RandomSelectButton, {\n    getRandomName: getRandomName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Form, {\n    names: names,\n    handleNameCreate: handleNameCreate,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(List, {\n    names: names,\n    handleNameRemove: handleNameRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }));\n};\n\nvar MapStateToProps = function MapStateToProps(store) {\n  return {\n    names: store.app.names,\n    selected: store.app.selected,\n    lastRandomlyPickedId: store.app.lastRandomlyPickedId\n  };\n};\n\nvar MapDispatchToProps = function MapDispatchToProps(dispatch) {\n  return {\n    addName: function addName(name) {\n      return dispatch({\n        type: actionConstants.ADD_NAME,\n        payload: name\n      });\n    },\n    deleteName: function deleteName(name) {\n      return dispatch({\n        type: actionConstants.DELETE_NAME,\n        payload: name\n      });\n    },\n    setLastRandomlyPickedId: function setLastRandomlyPickedId(id) {\n      return dispatch({\n        type: actionConstants.SET_RANDOM_ID,\n        payload: id\n      });\n    },\n    setSelectedName: function setSelectedName(name) {\n      return dispatch({\n        type: actionConstants.SET_SELECTED,\n        payload: name\n      });\n    }\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(AppContainer);","map":{"version":3,"sources":["/Users/dkalu/Desktop/Projects/Tests/Inspired Mobile/Code/name-generator ☺️/src/containers/AppContainer.tsx"],"names":["React","connect","actionConstants","Form","List","RandomSelectButton","AppContainer","props","handleNameCreate","name","names","addName","newListState","push","handleNameRemove","id","deleteName","checkElementIdEqual","randomlyPicked","lastRandomlyPickedId","getRandomName","setLastRandomlyPickedId","setSelectedName","selected","listClone","Array","from","map","o","Object","assign","length","Math","floor","random","randomlyPickedElementIndex","findIndex","todo","randomName","text","MapStateToProps","store","app","MapDispatchToProps","dispatch","type","ADD_NAME","payload","DELETE_NAME","SET_RANDOM_ID","SET_SELECTED"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as MyTypes from \"../types/mytypes\";\nimport { actionConstants } from \"../actions\";\n\n// Import Interfaces\nimport { PayloadInterface } from \"../types/interfaces\";\n\n// Import components\nimport Form from \"../components/Form\";\nimport List from \"../components/List\";\nimport RandomSelectButton from \"../components/RandomSelectButton\";\n\ninterface AppContainerProps {\n  names: PayloadInterface[];\n  selected: PayloadInterface[],\n  lastRandomlyPickedId: string,\n  addName: any,\n  deleteName: any,\n  setLastRandomlyPickedId: any,\n  setSelectedName: any\n}\n\nconst AppContainer: React.FC<AppContainerProps> = (props: AppContainerProps) => {\n  // Creating new item\n  const handleNameCreate = (name: PayloadInterface) => {\n\n    const { names, addName } = props;\n\n    // Prepare new state\n    const newListState: PayloadInterface[] = [...names];\n\n    // Update new state\n    newListState.push(name);\n\n    // Update state\n    addName(newListState);\n  }\n\n\n\n  const handleNameRemove = (id: string) => {\n    const { deleteName } = props;\n\n    deleteName(id);\n  }\n\n  const checkElementIdEqual = (randomlyPicked: any) => {\n    const { lastRandomlyPickedId } = props;\n    return randomlyPicked.id !== lastRandomlyPickedId;\n  }\n\n  // Generate random name\n  const getRandomName = () => {\n    const { names, setLastRandomlyPickedId, setSelectedName, selected } = props;\n    const listClone: PayloadInterface[] = Array.from(names).map(o =>\n      Object.assign({}, o)\n    );\n\n    if (listClone.length > 0) {\n      let randomlyPicked: PayloadInterface;\n      randomlyPicked =\n        listClone[Math.floor(Math.random() * listClone.length)];\n\n      if (checkElementIdEqual(randomlyPicked)) {\n        setLastRandomlyPickedId(randomlyPicked.id);\n        setSelectedName([randomlyPicked]);\n      } else {\n        setLastRandomlyPickedId(randomlyPicked.id);\n        const randomlyPickedElementIndex = listClone.findIndex(\n          (todo: PayloadInterface) => todo.id === randomlyPicked.id\n        );\n\n        if (listClone.length === 1) {\n          setSelectedName([randomlyPicked]);\n        } else {\n          if (randomlyPickedElementIndex !== 0) {\n\n            setSelectedName([listClone[randomlyPickedElementIndex - 1]]);\n            if (listClone[randomlyPickedElementIndex - 1] && selected[0]) {\n              if (\n                listClone[randomlyPickedElementIndex - 1].id ===\n                selected[0].id\n              ) {\n                setSelectedName([listClone[randomlyPickedElementIndex + 1]]);\n              }\n            }\n          }\n          setSelectedName([listClone[randomlyPickedElementIndex + 1]]);\n        }\n      }\n    }\n  }\n\n  const { names, selected } = props;\n\n  let randomName;\n\n  if (selected[0]) {\n    randomName = selected[0].text;\n  }\n\n  return (\n    <div className=\"app-wrapper\">\n\n      {randomName ? <div className=\"random-name\">{randomName}</div> : ''}\n\n      <RandomSelectButton getRandomName={getRandomName} />\n      <Form names={names} handleNameCreate={handleNameCreate} />\n      <List\n        names={names}\n        handleNameRemove={handleNameRemove}\n      />\n    </div>\n  );\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n  return {\n    names: store.app.names,\n    selected: store.app.selected,\n    lastRandomlyPickedId: store.app.lastRandomlyPickedId\n  };\n};\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n  addName: (name: PayloadInterface[]) => dispatch({ type: actionConstants.ADD_NAME, payload: name }),\n  deleteName: (name: string) => dispatch({ type: actionConstants.DELETE_NAME, payload: name }),\n  setLastRandomlyPickedId: (id: string) => dispatch({ type: actionConstants.SET_RANDOM_ID, payload: id }),\n  setSelectedName: (name: PayloadInterface[]) => dispatch({ type: actionConstants.SET_SELECTED, payload: name }),\n});\n\nexport default connect(\n  MapStateToProps,\n  MapDispatchToProps\n)(AppContainer);\n"]},"metadata":{},"sourceType":"module"}