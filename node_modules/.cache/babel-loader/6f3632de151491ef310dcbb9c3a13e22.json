{"ast":null,"code":"import _slicedToArray from \"/Users/dkalu/Desktop/Projects/Tests/Inspired Mobile/Code/name-generator \\u263A\\uFE0F/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/dkalu/Desktop/Projects/Tests/Inspired Mobile/Code/name-generator \\u263A\\uFE0F/src/components/Form.tsx\";\n// Import dependencies\nimport * as React from 'react';\nimport shortid from 'shortid'; // Import interfaces\n\nvar Form = function Form(props) {\n  // Create ref for form input\n  var inputRef = React.useRef(null); // Create new form state\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      formState = _React$useState2[0],\n      setFormState = _React$useState2[1]; // Handle  input change\n\n\n  function handleInputChange(event) {\n    // Update form state with the text from input\n    setFormState(event.target.value);\n  } // Handle 'Enter' in input\n\n\n  function handleInputEnter(event) {\n    // Check for 'Enter' key\n    if (event.key === 'Enter') {\n      // Prepare new object\n      var newName = {\n        id: shortid.generate(),\n        text: formState\n      }; // Create new todo item\n\n      props.handleNameCreate(newName); // Reset the input field\n\n      if (inputRef && inputRef.current) {\n        inputRef.current.value = '';\n      }\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: \"app-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    ref: inputRef,\n    type: \"text\",\n    placeholder: \"Enter new name\",\n    onChange: function onChange(event) {\n      return handleInputChange(event);\n    },\n    onKeyPress: function onKeyPress(event) {\n      return handleInputEnter(event);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n};\n\nexport default Form;","map":{"version":3,"sources":["/Users/dkalu/Desktop/Projects/Tests/Inspired Mobile/Code/name-generator ☺️/src/components/Form.tsx"],"names":["React","shortid","Form","props","inputRef","useRef","useState","formState","setFormState","handleInputChange","event","target","value","handleInputEnter","key","newName","id","generate","text","handleNameCreate","current"],"mappings":";;AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB,C,CAEA;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAA6B;AACtC;AACA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAA+B,IAA/B,CAAjB,CAFsC,CAItC;;AAJsC,wBAKJL,KAAK,CAACM,QAAN,CAAe,EAAf,CALI;AAAA;AAAA,MAK/BC,SAL+B;AAAA,MAKpBC,YALoB,wBAOtC;;;AACA,WAASC,iBAAT,CAA2BC,KAA3B,EAAuE;AACnE;AACAF,IAAAA,YAAY,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACH,GAXqC,CAatC;;;AACA,WAASC,gBAAT,CAA0BH,KAA1B,EAAsD;AAClD;AACA,QAAIA,KAAK,CAACI,GAAN,KAAc,OAAlB,EAA2B;AACvB;AACA,UAAMC,OAAyB,GAAG;AAC9BC,QAAAA,EAAE,EAAEf,OAAO,CAACgB,QAAR,EAD0B;AAE9BC,QAAAA,IAAI,EAAEX;AAFwB,OAAlC,CAFuB,CAOvB;;AACAJ,MAAAA,KAAK,CAACgB,gBAAN,CAAuBJ,OAAvB,EARuB,CAUvB;;AACA,UAAIX,QAAQ,IAAIA,QAAQ,CAACgB,OAAzB,EAAkC;AAC9BhB,QAAAA,QAAQ,CAACgB,OAAT,CAAiBR,KAAjB,GAAyB,EAAzB;AACH;AACJ;AACJ;;AAED,SACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,GAAG,EAAER,QADT;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,WAAW,EAAC,gBAHhB;AAII,IAAA,QAAQ,EAAE,kBAAAM,KAAK;AAAA,aAAID,iBAAiB,CAACC,KAAD,CAArB;AAAA,KAJnB;AAKI,IAAA,UAAU,EAAE,oBAAAA,KAAK;AAAA,aAAIG,gBAAgB,CAACH,KAAD,CAApB;AAAA,KALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAWH,CA5CD;;AA8CA,eAAeR,IAAf","sourcesContent":["// Import dependencies\nimport * as React from 'react'\nimport shortid from 'shortid'\n\n// Import interfaces\nimport { PayloadInterface, AppFormInterface } from \"../types/interfaces\"\n\n// form component\nconst Form = (props: AppFormInterface) => {\n    // Create ref for form input\n    const inputRef = React.useRef<HTMLInputElement>(null)\n\n    // Create new form state\n    const [formState, setFormState] = React.useState('')\n\n    // Handle  input change\n    function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n        // Update form state with the text from input\n        setFormState(event.target.value)\n    }\n\n    // Handle 'Enter' in input\n    function handleInputEnter(event: React.KeyboardEvent) {\n        // Check for 'Enter' key\n        if (event.key === 'Enter') {\n            // Prepare new object\n            const newName: PayloadInterface = {\n                id: shortid.generate(),\n                text: formState,\n            }\n\n            // Create new todo item\n            props.handleNameCreate(newName)\n\n            // Reset the input field\n            if (inputRef && inputRef.current) {\n                inputRef.current.value = ''\n            }\n        }\n    }\n\n    return (\n        <div className=\"app-form\">\n            <input\n                ref={inputRef}\n                type=\"text\"\n                placeholder='Enter new name'\n                onChange={event => handleInputChange(event)}\n                onKeyPress={event => handleInputEnter(event)}\n            />\n        </div>\n    )\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}