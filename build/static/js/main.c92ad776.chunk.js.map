{"version":3,"sources":["actions/actions.ts","components/Form.tsx","components/ListItem.tsx","components/List.tsx","components/RandomSelectButton.tsx","containers/AppContainer.tsx","reducers/appReducer.ts","reducers/index.ts","store/store.ts","index.tsx","App.tsx"],"names":["actionConstants","Form","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","event","target","value","handleInputChange","onKeyPress","key","newName","id","shortid","generate","text","handleNameCreate","current","handleInputEnter","ListItem","name","onClick","handleNameRemove","List","names","map","Button","styled","button","RandomSelectButton","getRandomName","connect","store","app","selected","lastRandomlyPickedId","dispatch","addName","ADD_NAME","payload","deleteName","DELETE_NAME","setLastRandomlyPickedId","SET_RANDOM_ID","setSelectedName","SET_SELECTED","randomName","randomlyPicked","listClone","Array","from","o","Object","assign","length","checkElementIdEqual","Math","floor","random","randomlyPickedElementIndex","findIndex","newListState","push","initialState","rootReducer","combineReducers","state","action","newState","filter","configureStore","reducer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c92ad776.chunk.js","sourcesContent":["import { action } from \"typesafe-actions\";\nimport { PayloadInterface } from \"../types/interfaces\";\n\n// use typescript enum rather than action constants\nexport enum actionConstants {\n  ADD_NAME = \"ADD_NAME\",\n  UPDATE_NAME = \"UPDATE_NAME\",\n  DELETE_NAME = \"DELETE_NAME\",\n  SET_RANDOM_ID = \"SET_RANDOM_ID\",\n  SET_SELECTED = \"SET_SELECTED\"\n}\n\nexport const appActions = {\n  addName: (name: PayloadInterface[]) => action(actionConstants.ADD_NAME, name),\n  deleteName: (name: string) => action(actionConstants.UPDATE_NAME, name),\n  updateName: (name: string) => action(actionConstants.DELETE_NAME, name),\n  setLastRandomlyPickedId: (id: string) =>\n    action(actionConstants.SET_RANDOM_ID, id),\n  setSelectedName: (name: PayloadInterface[]) =>\n    action(actionConstants.SET_SELECTED, name)\n};\n","// Import dependencies\nimport * as React from 'react'\nimport shortid from 'shortid'\n\n// Import interfaces\nimport { PayloadInterface, AppFormInterface } from \"../types/interfaces\"\n\n// form component\nconst Form = (props: AppFormInterface) => {\n    // Create ref for form input\n    const inputRef = React.useRef<HTMLInputElement>(null)\n\n    // Create new form state\n    const [formState, setFormState] = React.useState('')\n\n    // Handle  input change\n    function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n        // Update form state with the text from input\n        setFormState(event.target.value)\n    }\n\n    // Handle 'Enter' in input\n    function handleInputEnter(event: React.KeyboardEvent) {\n        // Check for 'Enter' key\n        if (event.key === 'Enter') {\n            // Prepare new object\n            const newName: PayloadInterface = {\n                id: shortid.generate(),\n                text: formState,\n            }\n\n            // Create new  item\n            props.handleNameCreate(newName)\n\n            // Reset the input field\n            if (inputRef && inputRef.current) {\n                inputRef.current.value = ''\n            }\n        }\n    }\n\n    return (\n        <div className=\"app-form\">\n            <input\n                ref={inputRef}\n                type=\"text\"\n                placeholder='Enter new name'\n                onChange={event => handleInputChange(event)}\n                onKeyPress={event => handleInputEnter(event)}\n            />\n        </div>\n    )\n}\n\nexport default Form\n","// Import dependencies\nimport * as React from 'react'\n\n// Import interfaces\nimport { ListItemInterface } from \"../types/interfaces\";\n\n// ListItem component\nconst ListItem = (props: ListItemInterface) => {\n    return (\n        <div className='list-item'>\n            <div className=\"list-item-input-wrapper\">\n                <div>\n                    <h4>{props.name.text}</h4>\n                </div>\n            </div>\n\n            <div className=\"item-remove\" onClick={() => props.handleNameRemove(props.name.id)}>\n                &#x02A2F;\n      </div>\n        </div>\n    )\n}\n\nexport default ListItem\n","// Import dependencies\nimport * as React from \"react\";\n\n// Import ListItem\nimport ListItem from \"./ListItem\";\n\n// Import interfaces\nimport { DataListInterface } from \"../types/interfaces\";\n\n// List component\nconst List = (props: DataListInterface) => {\n    return (\n        <div className=\"app-list\">\n            <ul>\n                {props.names.map(name => (\n                    <li key={name.id}>\n                        <ListItem\n                            name={name}\n                            handleNameRemove={props.handleNameRemove}\n                        />\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default List;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { RandomNameInterface } from \"../types/interfaces\";\n\nconst Button = styled.button`\n  background: #3498db;\n  color: #fff;\n  height: 45px;\n  font-size: 14px;\n  border-none;\n  margin-bottom: 12px;\n  outline: none !important;\n  cursor: pointer;\n`;\n\nconst RandomSelectButton = (props: RandomNameInterface) => {\n    return (\n        <Button onClick={() => props.getRandomName()}> Get random name</Button>\n    );\n};\n\nexport default RandomSelectButton;\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport * as MyTypes from \"../types/mytypes\";\nimport { actionConstants } from \"../actions\";\n\n// Import Interfaces\nimport { PayloadInterface } from \"../types/interfaces\";\n\n// Import components\nimport Form from \"../components/Form\";\nimport List from \"../components/List\";\nimport RandomSelectButton from \"../components/RandomSelectButton\";\n\ninterface AppContainerProps {\n  names: PayloadInterface[];\n  selected: PayloadInterface[],\n  lastRandomlyPickedId: string,\n  addName: any,\n  deleteName: any,\n  setLastRandomlyPickedId: any,\n  setSelectedName: any\n}\n\nconst AppContainer: React.FC<AppContainerProps> = (props: AppContainerProps) => {\n  // Creating new item\n  const handleNameCreate = (name: PayloadInterface) => {\n\n    const { names, addName } = props;\n\n    // Prepare new state\n    const newListState: PayloadInterface[] = [...names];\n\n    // Update new state\n    newListState.push(name);\n\n    // Update state\n    addName(newListState);\n  }\n\n  const handleNameRemove = (id: string) => {\n    const { deleteName } = props;\n\n    deleteName(id);\n  }\n\n  const checkElementIdEqual = (randomlyPicked: any) => {\n    const { lastRandomlyPickedId } = props;\n    return randomlyPicked.id !== lastRandomlyPickedId;\n  }\n\n  // Generate random name\n  const getRandomName = () => {\n    const { names, setLastRandomlyPickedId, setSelectedName, selected } = props;\n    const listClone: PayloadInterface[] = Array.from(names).map(o =>\n      Object.assign({}, o)\n    );\n\n    if (listClone.length > 0) {\n      let randomlyPicked: PayloadInterface;\n      randomlyPicked =\n        listClone[Math.floor(Math.random() * listClone.length)];\n\n      if (checkElementIdEqual(randomlyPicked)) {\n        setLastRandomlyPickedId(randomlyPicked.id);\n        setSelectedName([randomlyPicked]);\n      } else {\n        setLastRandomlyPickedId(randomlyPicked.id);\n        const randomlyPickedElementIndex = listClone.findIndex(\n          (name: PayloadInterface) => name.id === randomlyPicked.id\n        );\n\n        if (listClone.length === 1) {\n          setSelectedName([randomlyPicked]);\n        } else {\n          if (randomlyPickedElementIndex !== 0) {\n\n            setSelectedName([listClone[randomlyPickedElementIndex - 1]]);\n            if (listClone[randomlyPickedElementIndex - 1] && selected[0]) {\n              if (\n                listClone[randomlyPickedElementIndex - 1].id ===\n                selected[0].id\n              ) {\n                setSelectedName([listClone[randomlyPickedElementIndex + 1]]);\n              }\n            }\n          }\n          setSelectedName([listClone[randomlyPickedElementIndex + 1]]);\n        }\n      }\n    }\n  }\n\n  const { names, selected } = props;\n\n  let randomName;\n\n  if (selected[0]) {\n    randomName = selected[0].text;\n  }\n\n  return (\n    <div className=\"app-wrapper\">\n\n      {randomName ? <div className=\"random-name\">{randomName}</div> : ''}\n\n      <RandomSelectButton getRandomName={getRandomName} />\n      <Form names={names} handleNameCreate={handleNameCreate} />\n      <List\n        names={names}\n        handleNameRemove={handleNameRemove}\n      />\n    </div>\n  );\n}\n\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\n  return {\n    names: store.app.names,\n    selected: store.app.selected,\n    lastRandomlyPickedId: store.app.lastRandomlyPickedId\n  };\n};\n\nconst MapDispatchToProps = (dispatch: Dispatch<MyTypes.RootAction>) => ({\n  addName: (name: PayloadInterface[]) => dispatch({ type: actionConstants.ADD_NAME, payload: name }),\n  deleteName: (name: string) => dispatch({ type: actionConstants.DELETE_NAME, payload: name }),\n  setLastRandomlyPickedId: (id: string) => dispatch({ type: actionConstants.SET_RANDOM_ID, payload: id }),\n  setSelectedName: (name: PayloadInterface[]) => dispatch({ type: actionConstants.SET_SELECTED, payload: name }),\n});\n\nexport default connect(\n  MapStateToProps,\n  MapDispatchToProps\n)(AppContainer);\n","import * as MyTypes from \"../types/mytypes\";\nimport { actionConstants } from \"../actions/\";\nimport { PayloadInterface } from \"../types/interfaces\";\n\ninterface ListModel {\n  names: PayloadInterface[];\n  selected: PayloadInterface[];\n  lastRandomlyPickedId: string;\n}\n\nconst initialState: ListModel = {\n  names: [],\n  selected: [],\n  lastRandomlyPickedId: \"\"\n};\n\nexport const appReducer = (\n  state: ListModel = initialState,\n  action: MyTypes.RootAction\n) => {\n  switch (action.type) {\n    case actionConstants.ADD_NAME: {\n      return { ...state, names: action.payload };\n    }\n    case actionConstants.DELETE_NAME: {\n      const id = action.payload;\n      // Prepare new state\n      const newState: PayloadInterface[] = state.names.filter(\n        (name: PayloadInterface) => name.id !== id\n      );\n      return { ...state, names: newState };\n    }\n    case actionConstants.SET_RANDOM_ID: {\n      return { ...state, lastRandomlyPickedId: action.payload };\n    }\n    case actionConstants.SET_SELECTED: {\n      return { ...state, selected: action.payload };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { appReducer } from \"./appReducer\";\n\nconst rootReducer = combineReducers({\n  app: appReducer\n});\n\nexport default rootReducer;\n","/* import { createStore } from \"redux\";\nimport rootReducer from \"../reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store; */\n\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"../reducers\";\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport default store;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./App\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import * as React from \"react\";\nimport AppContainer from \"./containers/AppContainer\";\nimport \"./styles/style.css\";\n\nexport const App: React.FC<{}> = () => {\n  return (\n    <>\n      <AppContainer />\n    </>\n  );\n};\n"],"sourceRoot":""}